{"mappings":"AAuBe,SAAAA,EAAUC,EAAOC,EAAUC,GAKrCA,IAMAC,EANAD,KAAW,GAJfE,EAAAC,EACCC,kBADD,IAAAF,KAAAG,EAAAF,EAECG,iBAFD,IAAAD,KAAAE,EAAAJ,EAGCK,oBAHD,IAAAD,OAGgBE,EAHhBF,EAWIG,GAAY,EAGZC,EAAW,EAGf,SAASC,IACJX,GACHY,aAAaZ,EAEd,CAcD,SAASa,IAAuB,QAAAC,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAC3BC,MAAOC,KACPC,EAAUC,KAAKC,MAAQd,EAO3B,SAASe,IACRf,EAAWa,KAAKC,MAChB1B,EAAS4B,MAAMN,EAAMH,EACrB,CAMD,SAASU,IACR3B,OAAYQ,CACZ,CAhBGC,IAkBCJ,IAAaE,GAAiBP,GAMlCyB,IAGDd,SAEqBH,IAAjBD,GAA8Be,EAAUzB,EACvCQ,GAMHK,EAAWa,KAAKC,MACXrB,IACJH,EAAY4B,WAAWrB,EAAeoB,EAAQF,EAAM5B,KAOrD4B,KAEwB,IAAftB,IAYVH,EAAY4B,WACXrB,EAAeoB,EAAQF,OACNjB,IAAjBD,EAA6BV,EAAQyB,EAAUzB,IAGjD,CAKD,OAHAgB,EAAQgB,OAjFCA,SAAO9B,GACkBA,IAAjC+B,GAAiC/B,GAAW,IAApCgC,oBAAR,IAAAD,KACAnB,IACAF,GAAasB,CACb,EAgFMlB,CACP,CCnID,MAAMmB,EAAO,CACXC,MAAOC,SAASC,cAAc,SAC9BC,QAASF,SAASC,cAAc,YAChCE,OAAQH,SAASC,cAAc,UAC/BG,KAAMJ,SAASC,cAAc,SAG/BH,EAAKM,KAAKC,iBAAiB,UAe3B,SAAsBC,GACpBA,EAAMC,iBACNC,QAAQC,IAAIC,GACZC,aAAaC,WAAW,uBACxBd,EAAKM,KAAKS,QACVH,EAAW,CAAEX,MAAO,GAAIG,QAAS,GACnC,IApBAJ,EAAKM,KAAKC,iBAAiB,QAAS3C,EAAS,KAM7C,SAAiB4C,GACfI,EAAW,IACNA,EACH,CAACJ,EAAMQ,OAAOC,MAAOT,EAAMQ,OAAOE,OAEpCL,aAAaM,QAAQ,sBAAuBC,KAAKC,UAAUT,GAC7D,KAVA,IAAIA,EAAW,CAAEX,MAAO,GAAIG,QAAS,KAoBrC,WACE,MAAMkB,EAAcF,KAAKG,MAAMV,aAAaW,QAAQ,wBAEpD,IAAKF,EACH,OAEFtB,EAAKC,MAAMiB,MAAQI,EAAYrB,MAC/BD,EAAKI,QAAQc,MAAQI,EAAYlB,QAEjCQ,EAAW,CACTX,MAAOqB,EAAYrB,MACnBG,QAASkB,EAAYlB,QAEzB,CA/BAqB","sources":["node_modules/throttle-debounce/throttle.js","src/js/03-feedback.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","import { throttle } from 'throttle-debounce';\n\nconst refs = {\n  email: document.querySelector('input'),\n  message: document.querySelector('textarea'),\n  button: document.querySelector('button'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\nrefs.form.addEventListener('input', throttle(500, onInput));\n\nlet formData = { email: '', message: '' };\n\nsetCurrentData();\n\nfunction onInput(event) {\n  formData = {\n    ...formData,\n    [event.target.name]: event.target.value,\n  };\n  localStorage.setItem('feedback-form-state', JSON.stringify(formData));\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  console.log(formData);\n  localStorage.removeItem('feedback-form-state');\n  refs.form.reset();\n  formData = { email: '', message: '' };\n}\n\nfunction setCurrentData() {\n  const currentData = JSON.parse(localStorage.getItem('feedback-form-state'));\n\n  if (!currentData) {\n    return;\n  }\n  refs.email.value = currentData.email;\n  refs.message.value = currentData.message;\n\n  formData = {\n    email: currentData.email,\n    message: currentData.message,\n  };\n}\n"],"names":["$8b2e3fa012f8d6d4$export$de363e709c412c8a","delay","callback","options","timeoutID","_ref$noTrailing","_ref","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","undefined","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","this","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","_ref2$upcomingOnly","upcomingOnly","$945622fd0f572e60$var$refs","email","document","querySelector","message","button","form","addEventListener","event","preventDefault","console","log","$945622fd0f572e60$var$formData","localStorage","removeItem","reset","target","name","value","setItem","JSON","stringify","currentData","parse","getItem","$945622fd0f572e60$var$setCurrentData"],"version":3,"file":"03-feedback.090b9666.js.map"}